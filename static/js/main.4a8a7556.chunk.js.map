{"version":3,"sources":["algorithms/mergeSort.js","components/SortingVisualizer/SortingVisualizer.jsx","algorithms/bubbleSort.js","algorithms/selectionSort.js","components/PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","components/PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/helper-func-algorithms.js","components/Home.jsx","components/myNavbar.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","length","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","i","j","k","push","doMerge","PRIMARY_COLOR","SortingVisualizer","props","state","algorithm","dropdownText","this","resetArray","min","max","random","setState","alg","bubbleSort","mergeSort","selectionSort","arrayBars","document","getElementsByClassName","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","len","cur","next","temp","getBubbleSortAnimations","barOneHeight","barTwoHeight","min_index","getSelectionSortAnimations","check1","check2","barOneIndex2","barOneHeight2","barTwoIndex2","barTwoHeight2","barOneStyle2","barTwoStyle2","barOneIndex3","barTwoIndex3","barOneStyle3","barTwoStyle3","color3","color2","className","DropdownButton","variant","id","title","Dropdown","Item","onClick","setStateBubble","setStateSelection","setStateMerge","Button","visualize","map","value","idx","key","React","Component","Node","row","col","isStart","isFinish","isWall","onMouseDown","onMouseEnter","onMouseLeave","onMouseUp","extraClassName","sortNodesByDistance","unvisitedNodes","sort","node_A","node_B","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","getAllNodes","nodes","PathfindingVisualizer","mouseIsPressed","changeWall","startNode","changeStart","finishNode","changeFinish","getInitialGrid","findStartOrFinishNode","prevStart","newGrid","modifyGrid","prevFinish","visitedNodesInOrder","nodesInShortestPathOrder","animateShortestPath","classCheck","getElementById","closestNode","shift","Infinity","dijkstra","newFinishNode","dijkstraReturnFinishNode","currentNode","console","log","unshift","getNodesInShortestPathOrder","animateDijkstra","resetGrid","currentRow","createNode","setStateDijkstra","reset","visualizeDijkstra","rowIndex","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseLeave","handleMouseUp","typeNode","active","newNode","startOrFinish","Home","width","viewBox","fill","xmlns","d","stroke","stroke-width","myNavbar","Navbar","sticky","bg","Nav","Link","to","process","icon","faHome","size","Brand","href","faGithub","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a8a7556.chunk.js","sourcesContent":["// use auxiliary array to override values in main array\n// return array of animations rather than array\n    // each time compare values, create an animation (which holds two values being compared)\n// in SortingVisualizer, get animations, iterate thru animations \n\n\nexport function getMergeSortAnimations(array) {\n    if (array.length <= 1) return array;\n\n    const animations = [];\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length-1, auxiliaryArray, animations);\n    return animations;\n}\n\n// NOTE: javascript arrays and objects are pass by reference \nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n    if(startIndex === endIndex) return;\n\n    const middleIndex = Math.floor((startIndex+endIndex)/2);\n    mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIndex+1, endIndex, mainArray, animations);\n    doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\n\nfunction doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n    // i and j are the values comparing , k is index in original array w/ value at index i in auxiliary array\n    let i = startIndex;             \n    let j = middleIndex + 1;\n    let k = startIndex;\n\n    // merge two \"halves\"\n    while(i <= middleIndex && j <= endIndex) {\n        // comparing these values ; push them once to change colour\n        animations.push([i,j]);\n        // push second time to revert colour\n        animations.push([i,j]);\n\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // overwrite value at index k in og array w/ value at index i in auxiliary array\n            animations.push([k,auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // overwrite value at index k in og array w/ value at index j in auxiliary array\n            animations.push([k,auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n\n    // merge \"remainder\" of either first or last half\n    while (i <= middleIndex) {\n        // comparing these values ; push them once to change colour\n        animations.push([i, i]);\n        // push second time to revert colour\n        animations.push([i, i]);\n        // overwrite value at index k in og array w/ value at index i in auxiliary array\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      }\n      while (j <= endIndex) {\n        // comparing these values ; push them once to change colour\n        animations.push([j, j]);\n        // push second time to revert colour\n        animations.push([j, j]);\n        // overwrite value at index k in og array w/ value at index j in auxiliary array\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../../algorithms/mergeSort.js';\nimport {getBubbleSortAnimations} from '../../algorithms/bubbleSort.js';\nimport {getSelectionSortAnimations} from '../../algorithms/selectionSort.js';\n\n\nimport { Button, DropdownButton, Dropdown } from 'react-bootstrap';\n\n\n\nconst NUMBER_OF_ARRAY_BARS = 150;\nconst ANIMATION_SPEED_MS = 5;\nconst PRIMARY_COLOR = 'rgba(0, 190, 218, 0.75)';\nconst SECONDARY_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            algorithm: \"Bubble\",        // DEFAULT BUBBLE SORT\n            dropdownText: \"Choose an Algorithm!\",\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 700));\n        }\n        this.setState({array});\n    }\n\n\n\n    // Helper functions to select correct sort AND change dropdownText\n    setStateBubble() {\n        this.setState({algorithm : \"Bubble\", dropdownText: \"Bubble Sort\"});\n    }\n    setStateMerge() {\n        this.setState({algorithm : \"Merge\", dropdownText: \"Merge Sort\"});\n    }\n    setStateSelection() {\n        this.setState({algorithm : \"Selection\", dropdownText: \"Selection Sort\"});\n    }\n\n\n\n    // Play the animation for the selected Sorting Algorithm\n    visualize() {\n        const alg = this.state.algorithm;\n        if(alg === \"Bubble\") {\n            this.bubbleSort();\n        }\n        else if (alg === \"Merge\") {\n            this.mergeSort();\n        }\n        else if (alg === \"Selection\") {\n            this.selectionSort();\n        }\n    }\n\n\n\n    // below functions process the actual animations of the sorting algorithms\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n\n            // if is color change (every 3rd animation req colour change)\n            if(i % 3 !== 2) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                let color = PRIMARY_COLOR;\n                if (i % 3 === 0) {\n                    color = SECONDARY_COLOR;\n                }\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED_MS);\n            } \n            // changing height\n            else {\n                setTimeout(() => {\n                    const [barOneIndex, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIndex].style;\n                    barOneStyle.height = `${newHeight}.px`;\n                }, i*ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        var i;\n\n        // animations come in set of FOURS\n        for( i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n\n            // first animation: change to SECONDARY_COLOR\n            if(i % 4 === 0) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                let color = SECONDARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED_MS);\n            }\n\n            // second and third animation: modify heights\n            if(i % 4 === 1 ) {\n                const [barOneIndex, barOneHeight] = animations[i];\n                i++;\n                const [barTwoIndex, barTwoHeight] = animations[i];\n\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n\n                setTimeout(() => {\n                    barOneStyle.height = `${barOneHeight}.px`;\n                    barTwoStyle.height = `${barTwoHeight}.px`;\n                }, i*ANIMATION_SPEED_MS);\n            }\n\n            // fourth animation: change back to PRIMARY_COLOR\n            if(i % 4 === 3) {\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                let color = PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED_MS);\n            }\n        }\n\n    }\n\n\n    selectionSort() {\n        const animations = getSelectionSortAnimations(this.state.array);\n        var i;\n        for(i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n\n            // if no [-1,-1] pair, then a pair animations -> switching bar colours for compared elements\n            // [-1,-1] signals set of FOUR animations for ACTUAL SWAP OF ARRAY BARS\n\n            // NOTE: needed to redefine var as const w/ numbers because .style would be undefined otherwise\n            var [check1, check2] = animations[i];\n            if(check1 === -1 && check2 === -1) {\n                i++;            // need to skip past [-1,-1]\n\n                // first animation: change to SECONDARY_COLOR\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                let color = SECONDARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED_MS);\n\n                i++;\n                // second and third animation: modify heights\n                const [barOneIndex2, barOneHeight2] = animations[i];\n                i++;\n                const [barTwoIndex2, barTwoHeight2] = animations[i];\n                const barOneStyle2 = arrayBars[barOneIndex2].style;\n                const barTwoStyle2 = arrayBars[barTwoIndex2].style;\n\n                setTimeout(() => {\n                    barOneStyle2.height = `${barOneHeight2}.px`;\n                    barTwoStyle2.height = `${barTwoHeight2}.px`;\n                }, i*ANIMATION_SPEED_MS);\n                \n\n                i++;\n                // fourth animation: change back to PRIMARY_COLOR\n                const [barOneIndex3, barTwoIndex3] = animations[i];\n                const barOneStyle3 = arrayBars[barOneIndex3].style;\n                const barTwoStyle3 = arrayBars[barTwoIndex3].style;\n                let color3 = PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle3.backgroundColor = color3;\n                    barTwoStyle3.backgroundColor = color3;\n                }, i*ANIMATION_SPEED_MS);\n                \n            }\n\n            // just switch colours\n            else {\n                // console.log(animations[i]);\n\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                let color = SECONDARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i*ANIMATION_SPEED_MS);\n            \n                i++\n                const [barOneIndex2, barTwoIndex2] = animations[i];\n                const barOneStyle2 = arrayBars[barOneIndex2].style;\n                const barTwoStyle2 = arrayBars[barTwoIndex2].style;\n                let color2 = PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle2.backgroundColor = color2;\n                    barTwoStyle2.backgroundColor = color2;\n                }, i*ANIMATION_SPEED_MS);\n                \n            }\n\n        }\n    }\n\n\n\n    quickSort() {}\n    heapSort() {}\n\n\n\n\n\n\n\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <>\n\n                <div className=\"sidebar-s\">\n                    <h1 className=\"sidebar-s-title\">Algorithm Visualizer</h1>\n                    <hr className=\"sidebar-s-line\"/>\n                    {/* title=\"Choose an Algorithm\" */}\n                    <DropdownButton variant=\"secondary\" className=\"sidebar-s-dropdown\" id=\"dropdown-basic-button\" title={this.state.dropdownText}>\n                        <Dropdown.Item onClick={() => this.setStateBubble()}>Bubble Sort</Dropdown.Item>                        \n                        <Dropdown.Item onClick={() => this.setStateSelection()}>Selection Sort</Dropdown.Item>\n                        <Dropdown.Item onClick={() => this.setStateMerge()}>Merge Sort</Dropdown.Item>\n                        {/* <Dropdown.Item onClick={() => this.quickSort()}>Quick Sort</Dropdown.Item> */}\n                        {/* <Dropdown.Item onClick={() => this.heapSort()}>Heap Sort</Dropdown.Item> */}\n                    </DropdownButton>\n                    \n                    <Button onClick={() => this.resetArray()} variant=\"info\">\n                        New Array\n                    </Button>{' '}\n                    <Button onClick={() => this.visualize()} variant=\"success\">\n                        Visualize!\n                    </Button>{' '}\n                </div>\n\n                <div id=\"sorting-content\">\n                    <div className=\"array-container\">\n                        {array.map((value,idx) => (\n                            <div \n                                className=\"array-bar\" \n                                key={idx}\n                                style={{\n                                    backgroundColor: PRIMARY_COLOR,\n                                    height: `${value}px`,\n                                }}\n                                >\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </>\n        );\n    }  \n}\n\n\n\n\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min,max) {\n    return Math.floor(Math.random() * (max-min+1) + min);\n}","// Returns an array of the animations\nexport function getBubbleSortAnimations(array) {\n    if (array.length <= 1) return array;\n\n    const animations = [];\n    bubbleSort(array, animations);\n    return animations;\n}\n\nfunction bubbleSort(array, animations) {\n    const len = array.length;\n    var i,j;\n    for(i = 0; i < len; i++) {\n        // last i elements in place\n        for(j = 0; j < len - i - 1; j++) {\n            let cur = j;\n            let next = j+1;\n\n            // make SECONDARY_COLOR since comparing these two values\n            animations.push([cur,next]);\n\n            // swap if cur element is greater than next element\n            if (array[cur] > array[next]) {\n                let temp = array[next];\n                array[next] = array[cur];\n                array[cur] = temp;\n\n                // push the modified heights\n                animations.push([cur, array[cur]]);\n                animations.push([next, array[next]]);\n            } \n            // cur element not greater\n            else {\n                // push the UNmodified heights\n                animations.push([cur, array[cur]]);\n                animations.push([next, array[next]]);\n            }\n\n            // revert elements back to PRIMARY_COLOR\n            animations.push([cur,next]);\n        }\n    }\n}","// Returns an array of the animations\nexport function getSelectionSortAnimations(array) {\n    if (array.length <= 1) return array;\n\n    const animations = [];\n    selectionSort(array, animations);\n    return animations;\n}\n\nfunction selectionSort(array, animations) {\n    const len = array.length;\n    var i,j;\n\n    for(i=0; i < len; i++) {\n        var min_index = i;\n\n        // find min element in remaining unsorted array\n        // just swap the colours in terms of animations\n        for(j = i+1; j < len; j++) {\n            let cur = min_index;\n            let next = j;\n\n            // make SECONDARY_COLOR since comparing these two values\n            animations.push([cur,next]);\n\n            // if found new index of min element\n            if(array[cur] > array[next]) {\n                min_index = j;\n            }\n\n            // revert elements back to PRIMARY_COLOR\n            animations.push([cur,next]);\n        }\n\n        // Swap element at min_index w/ element at index = i\n\n        // Signal sequence of animations for ACTUAL SWAP OF ARRAY BARS\n        animations.push([-1, -1]);\n\n        let temp = array[i];\n        array[i] = array[min_index];\n        array[min_index] = temp;\n\n        // make SECONDARY_COLOR since comparing these two values\n        animations.push([i,min_index]);\n        // push the modified heights\n        animations.push([i, array[i]]);\n        animations.push([min_index, array[min_index]]);\n        // revert elements back to PRIMARY_COLOR\n        animations.push([i,min_index]);\n    }\n}","import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    // define what a Node is\n    render() {\n        const {\n            row,\n            col,\n            isStart, \n            isFinish,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseLeave,\n            onMouseUp,\n        } = this.props;\n        // add extra class name depending on if isStart or isFinish property of Node\n        const extraClassName = isStart\n            ? 'node-start'\n            : isFinish\n            ? 'node-finish'\n            : isWall\n            ? 'node-wall'\n            : '';\n        return (\n            <td \n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row,col)}\n                onMouseEnter={() => onMouseEnter(row,col)}\n                onMouseLeave={() => onMouseLeave(row,col)}\n                onMouseUp={() => onMouseUp()}>\n            </td>\n        );\n    }\n}\n\n","// Performs Dijkstra's algorithm (https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/)\n// Returns all nodes in order in which they were visited = visitedNodesInOrder\n    // makes all nodes point back to their prev node -> allows to compute shortest path by backtracking from finish node\n\nexport function dijkstra(grid, startNode, finishNode) {\n\n    let visitedNodesInOrder = [];\n    startNode.distance = 0;\n    // startNode.isVisited = true;\n    updateUnvisitedNeighbors(startNode,grid);\n    let unvisitedNodes = getAllNodes(grid);\n    // !! operator returns boolean association of the value (i.e. if not 0 then true)\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);            // COULD CHANGE W/ MINHEAP\n        let closestNode = unvisitedNodes.shift();\n\n        // if encounter a wall, skip it\n        if (closestNode.isWall) {\n            continue;\n        } \n        // if closest node is at a distance of infinity, must be trapped so stop\n        if (closestNode.distance === Infinity) {\n            return visitedNodesInOrder;\n        }\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        // found finishNode\n        // if (closestNode === finishNode) {\n        if(closestNode.isFinish) {\n            // console.log(\"found ending\");\n            return visitedNodesInOrder;\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((node_A, node_B) => node_A.distance - node_B.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node,grid);\n    for(const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node,grid) {\n    const neighbors = [];\n    const {row,col} = node;\n    if(row > 0)\n        neighbors.push(grid[row-1][col]);\n    if (row < grid.length - 1) \n        neighbors.push(grid[row + 1][col]);\n    if (col > 0) \n        neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) \n        neighbors.push(grid[row][col + 1]);\n\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n\nexport function dijkstraReturnFinishNode(grid, startNode, finishNode) {\n\n    let visitedNodesInOrder = [];\n    startNode.distance = 0;\n    // startNode.isVisited = true;\n    updateUnvisitedNeighbors(startNode,grid);\n    let unvisitedNodes = getAllNodes(grid);\n    // !! operator returns boolean association of the value (i.e. if not 0 then true)\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);            // COULD CHANGE W/ MINHEAP\n        let closestNode = unvisitedNodes.shift();\n\n        // if encounter a wall, skip it\n        if (closestNode.isWall) {\n            continue;\n        } \n        // if closest node is at a distance of infinity, must be trapped so stop\n        if (closestNode.distance === Infinity) {\n            return visitedNodesInOrder;\n        }\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n\n        // found finishNode\n        // if (closestNode === finishNode) {\n        if(closestNode.isFinish) {\n            return closestNode;\n        }\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport {dijkstra, dijkstraReturnFinishNode} from '../../algorithms/dijkstra';\nimport {getNodesInShortestPathOrder} from '../../algorithms/helper-func-algorithms';\n\nimport { Button, DropdownButton, Dropdown } from 'react-bootstrap';\n\nimport \"./PathfindingVisualizer.css\";\n\nconst NUM_ROWS = 30;\nconst NUM_COLS = 40;\nconst INIT_START_ROW = 15;\nconst INIT_START_COL = 5;\nconst INIT_FINISH_ROW = 15;\nconst INIT_FINISH_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            changeWall: false,\n            startNode: null,\n            changeStart: false,\n            finishNode: null,\n            changeFinish: false,\n        };\n    }\n\n    componentDidMount() {\n        const nodes = getInitialGrid();\n        const startNode = findStartOrFinishNode(nodes, \"start\");\n        const finishNode = findStartOrFinishNode(nodes, \"finish\");\n        this.setState({ grid: nodes, startNode: startNode , finishNode: finishNode});\n    }\n\n    handleMouseDown(row,col) {\n        const grid = this.state.grid;\n        const node = grid[row][col];\n        // const newGrid = grid.slice();\n\n        // if in changeStart state, change startNode if allowed\n        if(this.state.changeStart){\n            // don't allow to place start node in a wall or finish\n            if(node.isWall || node.isFinish){\n                const prevStart = this.state.startNode;\n                const newGrid = modifyGrid(this.state.grid, prevStart.row, prevStart.col,\"start\", true);\n                this.setState({grid:newGrid, startNode:prevStart, changeStart:false});\n            }\n            else {\n                const newGrid = modifyGrid(this.state.grid, row, col,\"start\", true);\n                this.setState({grid:newGrid, startNode:node, changeStart:false});\n            }\n            return;\n        }\n        // check if start -> if yes then set changeStartState to true\n        else if(node.isStart) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"start\",false);\n            this.setState({grid:newGrid, changeStart: true});\n        }\n\n\n        // if in changeFinish state, change finishNode if allowed\n        else if(this.state.changeFinish){\n            // don't allow to place finish node in a wall or start\n            if(node.isWall || node.isStart){\n                const prevFinish = this.state.finishNode;\n                const newGrid = modifyGrid(this.state.grid, prevFinish.row, prevFinish.col,\"finish\", true);\n                this.setState({grid:newGrid, finishNode:prevFinish, changeFinish:false});\n            }\n            else {\n                const newGrid = modifyGrid(this.state.grid, row, col,\"finish\", true);\n                this.setState({grid:newGrid, finishNode:node, changeFinish:false});\n            }\n            return;\n        }\n        // check if finish -> if yes then set changeFinishState to true\n        else if(node.isFinish) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"finish\",false);\n            this.setState({grid:newGrid,changeFinish: true});\n\n        }\n\n\n        // if currently is changeWall state -> make not changeWall state\n        else if (this.state.changeWall) {\n            this.setState({changeWall: false});\n        }\n        // if not in changeWall state \n            // -> if clicked a wall make it not wall , if clicked not a wall/start/finish then toggle changeWall state\n        else if(!this.state.changeWall) {\n            if(node.isWall) {\n                const newGrid = modifyGrid(this.state.grid,row,col,\"wall\",false);\n                this.setState({grid:newGrid});\n            }\n            else {\n                const newGrid = modifyGrid(this.state.grid,row,col,\"wall\",true);\n                this.setState({grid:newGrid, changeWall:true});\n            }\n        }\n\n        // this.setState({grid: newGrid, mouseIsPressed: true});\n        this.setState({mouseIsPressed:true});\n    }\n\n    handleMouseEnter(row,col) {\n\n        // const newGrid = this.state.grid;\n        // if enter w/ changeStart state, make current node startNode style (but don't set startNode yet)\n        if(this.state.changeStart) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"start\",true);\n            this.setState({grid:newGrid});\n        }\n\n        // if enter w/ changeFinish state, make current node changeFinish style (but don't set finishNode yet)\n        if(this.state.changeFinish) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"finish\",true);\n            this.setState({grid:newGrid});\n        }\n\n        // if enter and w/ changeWall state, set current node to be a wall\n        else if(this.state.changeWall) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"wall\",true);\n            this.setState({grid:newGrid});\n        }\n        // this.setState({grid:newGrid});\n    }\n\n    handleMouseLeave(row,col) {\n        // const newGrid = this.state.grid;\n        if(this.state.changeStart) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"start\",false);\n            this.setState({grid:newGrid});\n        }\n        if(this.state.changeFinish) {\n            const newGrid = modifyGrid(this.state.grid,row,col,\"finish\",false);\n            this.setState({grid:newGrid});\n        }\n        // this.setState({grid:newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n\n    // goes thru each node in VisitedNodesInOrder, creates new node w/ isVisited = true\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                    setTimeout(() => {\n                        this.animateShortestPath(nodesInShortestPathOrder);\n                    }, 10 * i);\n                    return;\n                }\n                setTimeout(() => {\n                    const node = visitedNodesInOrder[i];\n                    const classCheck = document.getElementById(`node-${node.row}-${node.col}`).className\n                    if(classCheck !== 'node node-start' && classCheck !== 'node node-finish')\n                    {\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n                    }\n                }, 10 * i);\n            }\n      }\n    \n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            const classCheck = document.getElementById(`node-${node.row}-${node.col}`).className\n            if(classCheck !== 'node node-start' && classCheck !== 'node node-finish')\n            {\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n            }   \n        }, 50 * i);\n        }\n    }\n\n\n    visualizeDijkstra() {\n        let grid = this.state.grid;\n        let startNode = this.state.startNode;\n        let finishNode = this.state.finishNode;\n\n        const visitedNodesInOrder = dijkstra(grid,startNode,finishNode);\n\n        const newFinishNode = dijkstraReturnFinishNode(grid,startNode,finishNode);\n        this.setState({finishNode:newFinishNode});\n\n        // const nodesInShortestPathOrder = getNodesInShortestPathOrder(this.state.finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(newFinishNode);\n\n        // ***** TESTING *****\n        // console.log(\"running visualize dijkstra\");\n        // console.log(`startNode : ( ${startNode.row},${startNode.col} ) `)\n        // console.log(`finishNode : ( ${finishNode.row},${finishNode.col} )`);\n        // for(const node of nodesInShortestPathOrder){\n        //     console.log(`shortest path: ${node.row} , ${node.col} , ${node.previousNode}`);\n        // }\n\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n\n\n\n\n    // go thru each node of grid and reset states, init start and end\n    reset() {\n        // const resetGrid = this.state.grid.slice();\n        const resetGrid = [];\n        for (let row = 0; row < NUM_ROWS; row++) {\n            const currentRow = [];\n            for (let col = 0; col < NUM_COLS; col++) {\n                currentRow.push(createNode(row,col));\n            }\n            resetGrid.push(currentRow);\n        }\n\n        for (let i = 0; i < NUM_ROWS; i++) {\n            for (let j = 0; j < NUM_COLS; j++) {\n                const node = resetGrid[i][j];\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n                if(node.row === INIT_START_ROW && node.col === INIT_START_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\n                    node.isStart = true;\n                    this.setState({startNode:node});\n                }\n                if(node.row === INIT_FINISH_ROW && node.col === INIT_FINISH_COL) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\n                    node.isFinish = true;\n                    this.setState({finishNode:node});\n                }\n            }\n        }\n\n        this.setState({ grid: resetGrid, changeWall:false, changeStart:false, changeFinish:false });\n    }\n\n\n\n\n    // Helper functions to select correct sort\n    setStateDijkstra() {\n        // TODO: implement (look at Sorting Visualizer)\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    render() {\n        const { grid, mouseIsPressed } = this.state;\n\n        return (\n            <>\n                <div className=\"sidebar-p\">\n                    <h1 className=\"sidebar-p-title\">Algorithm Visualizer</h1>\n                    <hr className=\"sidebar-p-line\"/>\n                    <DropdownButton variant=\"secondary\" className=\"sidebar-p-dropdown\" id=\"dropdown-basic-button\" title=\"Choose an Algorithm\">\n                        <Dropdown.Item onClick={() => this.setStateDijkstra()}>Dijkstra's</Dropdown.Item>\n                    </DropdownButton>\n                    \n                    <Button onClick={() => this.reset()} variant=\"info\">\n                        Reset Grid\n                    </Button>{' '}\n                    <Button onClick={() => this.visualizeDijkstra()} variant=\"success\">\n                        Visualize!\n                    </Button>{' '}\n                </div>\n\n                <div id=\"pathfinder-content\">\n\n                    <table className=\"grid\">\n                        <tbody>\n                            {grid.map((row, rowIndex) => {\n                                return (\n                                    <tr className=\"gridRow\" key={rowIndex}>\n                                    {row.map((node, nodeIndex) => {\n                                        const {row, col, isStart, isFinish, isWall} = node;\n                                        return (\n                                            <Node \n                                                key={nodeIndex}\n                                                row={row}\n                                                col={col}\n                                                isStart={isStart}\n                                                isFinish={isFinish}\n                                                isWall={isWall}\n                                                mouseIsPressed={mouseIsPressed}\n                                                onMouseDown={(row,col) => \n                                                    this.handleMouseDown(row,col)\n                                                }\n                                                onMouseEnter={(row,col) => \n                                                    this.handleMouseEnter(row,col)\n                                                }\n                                                onMouseLeave={(row,col) =>\n                                                    this.handleMouseLeave(row,col)\n                                                }\n                                                onMouseUp={() => this.handleMouseUp()}>\n                                            </Node>\n                                        );\n                                    })}\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n                \n\n\n            \n                \n            </>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst getInitialGrid = () => {\n    const nodes = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col < NUM_COLS; col++) {\n            currentRow.push(createNode(row,col));\n        }\n        nodes.push(currentRow);\n    }\n    return nodes;\n};\n\nconst createNode = (row, col) => {\n    return {\n        row,\n        col,\n        // isStart: row === INIT_START_ROW && col === INIT_START_COL,\n        // isFinish: row === INIT_FINISH_ROW && col === INIT_FINISH_COL,\n        isWall: false,\n        distance: Infinity,\n        isVisited: false,\n        previousNode: null,\n    };\n};\n\n\n\n\n\n\n// used to update grid with a new node\n    // typeNode = start, wall, etc\n    // active = true/false -> if true then SET to typeNode, if false then set to NOT typeNode\nconst modifyGrid = (grid,row,col,typeNode,active) => {\n    let newGrid = grid.slice(); // return shallow copy of array\n    const node = newGrid[row][col];\n\n    if(typeNode === \"wall\") {\n        // cant make start or finish node a wall\n        if(node.isStart || node.isFinish) {\n            return newGrid;\n        }\n        // // ... spread operator -> expands an array into a list  \n        // const newNode = {\n        //     ...node,\n        //     isWall: active,\n        // };\n        const newNode = createNode(row,col);\n        newNode.isWall = active;\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    if(typeNode === \"start\") {\n        // cant make wall or finish start\n        if(node.isWall || node.isFinish) {\n            return newGrid;\n        }\n        const newNode = createNode(row,col);\n        newNode.isStart = active;\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    if(typeNode === \"finish\") {\n        // cant make wall or start finish\n        if(node.isWall || node.isStart) {\n            return newGrid;\n        }\n        const newNode = createNode(row,col);\n        newNode.isFinish = active;\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n}\n\n\n// identify and return the start or finish node AT FIRST\nconst findStartOrFinishNode = (grid, startOrFinish) => {\n    for (let row = 0; row < NUM_ROWS; row++) {\n        for (let col = 0; col < NUM_COLS; col++) {\n            const node = grid[row][col];\n            if(startOrFinish === \"start\")\n            {\n                if(row === INIT_START_ROW && col === INIT_START_COL) {\n                    node.isStart = true;\n                    return node;\n                }\n            } else {\n                if(row === INIT_FINISH_ROW && col === INIT_FINISH_COL) {\n                    node.isFinish = true;\n                    return node;\n                }\n            }\n        }\n    }\n}\n\n","// Backtracks from finishNode to find the shortest path.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        console.log(`getNodesInShortestPathOrder: ${currentNode}`);\n        nodesInShortestPathOrder.unshift(currentNode);  // unshift -- add new item to beginning of array and return new length\n        currentNode = currentNode.previousNode;\n    }   \n    return nodesInShortestPathOrder;\n}","import React from 'react';\nimport './Home.css';\n\n\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    // get exact lengths of individual letters for SVG animations\n    // componentDidMount() {\n    //     const logo = document.querySelectorAll(\"#logo path\");\n\n    //     // get exact lengths of individual letters for animations\n    //     console.log(\"asdf\");\n    //     for(let i = 0; i < logo.length; i++) {\n    //         console.log(`Letter ${i} is ${logo[i].getTotalLength()}`);\n    //     }\n    // }\n\n\n    render() {\n        return (\n            <>\n                <div className=\"home\">\n<svg id=\"logo\" width=\"553\" height=\"194\" viewBox=\"0 0 553 194\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M48.8105 55.4453H19.0254L12.3359 74H2.66797L29.8164 2.90625H38.0195L65.2168 74H55.5977L48.8105 55.4453ZM21.8574 47.7305H46.0273L33.918 14.4785L21.8574 47.7305Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M84.2109 66.334H117.902V74H74.7871V2.90625H84.2109V66.334Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M177.863 64.6738C175.454 68.1243 172.085 70.7122 167.756 72.4375C163.459 74.1302 158.446 74.9766 152.717 74.9766C146.923 74.9766 141.779 73.6257 137.287 70.9238C132.795 68.1895 129.312 64.3158 126.838 59.3027C124.396 54.2897 123.143 48.4792 123.078 41.8711V35.6699C123.078 24.9603 125.568 16.6595 130.549 10.7676C135.562 4.87565 142.593 1.92969 151.643 1.92969C159.064 1.92969 165.038 3.83398 169.562 7.64258C174.087 11.4186 176.854 16.7897 177.863 23.7559H168.488C166.73 14.3483 161.132 9.64453 151.691 9.64453C145.409 9.64453 140.64 11.8581 137.385 16.2852C134.162 20.6797 132.535 27.0599 132.502 35.4258V41.2363C132.502 49.2116 134.325 55.5592 137.971 60.2793C141.617 64.9668 146.548 67.3105 152.766 67.3105C156.281 67.3105 159.357 66.9199 161.994 66.1387C164.631 65.3574 166.812 64.0391 168.537 62.1836V46.2168H152.082V38.5996H177.863V64.6738Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M248.225 40.748C248.225 47.7142 247.053 53.8014 244.709 59.0098C242.365 64.1855 239.045 68.1406 234.748 70.875C230.451 73.6094 225.438 74.9766 219.709 74.9766C214.11 74.9766 209.146 73.6094 204.816 70.875C200.487 68.1081 197.118 64.1855 194.709 59.1074C192.333 53.9967 191.112 48.0885 191.047 41.3828V36.2559C191.047 29.4199 192.235 23.3815 194.611 18.1406C196.988 12.8997 200.34 8.89583 204.67 6.12891C209.032 3.32943 214.012 1.92969 219.611 1.92969C225.308 1.92969 230.321 3.31315 234.65 6.08008C239.012 8.81445 242.365 12.8021 244.709 18.043C247.053 23.2513 248.225 29.3223 248.225 36.2559V40.748ZM238.898 36.1582C238.898 27.7272 237.206 21.2656 233.82 16.7734C230.435 12.2487 225.699 9.98633 219.611 9.98633C213.687 9.98633 209.016 12.2487 205.598 16.7734C202.212 21.2656 200.471 27.5156 200.373 35.5234V40.748C200.373 48.9186 202.082 55.3477 205.5 60.0352C208.951 64.6901 213.687 67.0176 219.709 67.0176C225.764 67.0176 230.451 64.8203 233.771 60.4258C237.092 55.9987 238.801 49.6673 238.898 41.4316V36.1582Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M288.361 45.2402H271.662V74H262.238V2.90625H285.773C293.781 2.90625 299.934 4.72917 304.23 8.375C308.56 12.0208 310.725 17.3268 310.725 24.293C310.725 28.7201 309.52 32.5775 307.111 35.8652C304.735 39.153 301.415 41.6107 297.15 43.2383L313.85 73.4141V74H303.791L288.361 45.2402ZM271.662 37.5742H286.066C290.721 37.5742 294.416 36.3698 297.15 33.9609C299.917 31.5521 301.301 28.3294 301.301 24.293C301.301 19.8984 299.982 16.5293 297.346 14.1855C294.742 11.8418 290.965 10.6536 286.018 10.6211H271.662V37.5742Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M333.967 74H324.592V2.90625H333.967V74Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M398.811 10.6211H375.959V74H366.633V10.6211H343.83V2.90625H398.811V10.6211Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M463.996 74H454.572V41.1387H418.732V74H409.357V2.90625H418.732V33.4727H454.572V2.90625H463.996V74Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M492.756 2.90625L515.998 60.9141L539.24 2.90625H551.398V74H542.023V46.3145L542.902 16.4316L519.562 74H512.385L489.094 16.5781L490.021 46.3145V74H480.646V2.90625H492.756Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M42.9512 178.549L63.2637 119.906H73.5176L47.1504 191H38.8496L12.5312 119.906H22.7363L42.9512 178.549Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M93.1465 191H83.7715V119.906H93.1465V191Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M131.281 159.311C123.241 156.999 117.382 154.167 113.703 150.814C110.057 147.429 108.234 143.262 108.234 138.314C108.234 132.715 110.464 128.093 114.924 124.447C119.416 120.769 125.243 118.93 132.404 118.93C137.287 118.93 141.633 119.874 145.441 121.762C149.283 123.65 152.245 126.254 154.328 129.574C156.444 132.895 157.502 136.524 157.502 140.463H148.078C148.078 136.166 146.711 132.797 143.977 130.355C141.242 127.882 137.385 126.645 132.404 126.645C127.782 126.645 124.169 127.67 121.564 129.721C118.993 131.739 117.707 134.555 117.707 138.168C117.707 141.065 118.928 143.523 121.369 145.541C123.843 147.527 128.026 149.35 133.918 151.01C139.842 152.67 144.465 154.509 147.785 156.527C151.138 158.513 153.612 160.84 155.207 163.51C156.835 166.179 157.648 169.32 157.648 172.934C157.648 178.695 155.402 183.318 150.91 186.801C146.418 190.251 140.412 191.977 132.893 191.977C128.01 191.977 123.452 191.049 119.221 189.193C114.989 187.305 111.717 184.734 109.406 181.479C107.128 178.223 105.988 174.529 105.988 170.395H115.412C115.412 174.691 116.991 178.093 120.148 180.6C123.339 183.074 127.587 184.311 132.893 184.311C137.84 184.311 141.633 183.301 144.27 181.283C146.906 179.265 148.225 176.514 148.225 173.031C148.225 169.548 147.004 166.863 144.562 164.975C142.121 163.054 137.694 161.166 131.281 159.311Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M219.758 119.906V168.246C219.725 174.952 217.609 180.437 213.41 184.701C209.243 188.965 203.579 191.358 196.418 191.879L193.928 191.977C186.148 191.977 179.947 189.877 175.324 185.678C170.702 181.479 168.358 175.701 168.293 168.344V119.906H177.57V168.051C177.57 173.194 178.986 177.198 181.818 180.062C184.65 182.895 188.687 184.311 193.928 184.311C199.234 184.311 203.286 182.895 206.086 180.062C208.918 177.23 210.334 173.243 210.334 168.1V119.906H219.758Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M272.736 172.445H242.951L236.262 191H226.594L253.742 119.906H261.945L289.143 191H279.523L272.736 172.445ZM245.783 164.73H269.953L257.844 131.479L245.783 164.73Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M308.137 183.334H341.828V191H298.713V119.906H308.137V183.334Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M362.58 191H353.205V119.906H362.58V191Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M386.799 183.334H427.473V191H375.715V183.969L414.68 127.621H376.35V119.906H425.91V126.791L386.799 183.334Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M479.816 158.139H449.006V183.334H484.797V191H439.631V119.906H484.309V127.621H449.006V150.473H479.816V158.139Z\" stroke=\"white\" stroke-width=\"3\"/>\n    <path d=\"M522.541 162.24H505.842V191H496.418V119.906H519.953C527.961 119.906 534.113 121.729 538.41 125.375C542.74 129.021 544.904 134.327 544.904 141.293C544.904 145.72 543.7 149.577 541.291 152.865C538.915 156.153 535.594 158.611 531.33 160.238L548.029 190.414V191H537.971L522.541 162.24ZM505.842 154.574H520.246C524.901 154.574 528.596 153.37 531.33 150.961C534.097 148.552 535.48 145.329 535.48 141.293C535.48 136.898 534.162 133.529 531.525 131.186C528.921 128.842 525.145 127.654 520.197 127.621H505.842V154.574Z\" stroke=\"white\" stroke-width=\"3\"/>\n</svg>\n\n\n                </div>\n                \n\n            </>\n        );\n    }  \n}\n","import React from 'react';\nimport './myNavbar.css';\nimport {Link} from 'react-router-dom';\nimport { Nav, Navbar  } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\n\n\n\n\n\nexport default class myNavbar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    render() {\n        return (\n            <>\n                \n<Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\">\n\n    <Nav className=\"mr-auto\">\n        <Nav.Item>\n            <Nav.Link>\n                {/* <Link to=\"/\"> */}\n                <Link to={process.env.PUBLIC_URL + '/'}>\n                    <FontAwesomeIcon icon={faHome} size=\"2x\"></FontAwesomeIcon>\n\n                </Link>\n            </Nav.Link>\n        </Nav.Item>\n    </Nav>\n\n    <Nav className=\"mx-auto\">\n        <Nav.Item>\n            <Nav.Link>\n                <Link to={process.env.PUBLIC_URL + '/pathfindingVisualizer'}>\n                    Pathfinding Visualizer\n                </Link>\n            </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n            <Nav.Link>\n                <Link to={process.env.PUBLIC_URL + '/sortingVisualizer'}>\n                    Sorting Visualizer\n                </Link>\n            </Nav.Link>\n        </Nav.Item>\n    </Nav>\n\n    <Nav className=\"ml-auto\">\n        <Navbar.Brand href=\"https://github.com/marcuspearce/Algorithm-Visualizer\">\n            <FontAwesomeIcon icon={faGithub} size=\"2x\"></FontAwesomeIcon>\n        </Navbar.Brand>\n    </Nav>\n\n</Navbar>\n\n\n\n\n\n\n            </>\n\n\n        );\n    }  \n}\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './components/SortingVisualizer/SortingVisualizer';\nimport PathfindingVisualizer from './components/PathfindingVisualizer/PathfindingVisualizer';\nimport Home from './components/Home';\n\n// import { Navbar, Nav, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport MyNavbar from './components/myNavbar';\n\n\n\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n// everything within Router element has ability to use routing\n// Route renders out components based on url\n// Switch means as soon as find one (specific) matching url, go to that (solves prob of always rendering home page)\n  // 'exact' keyword also solves this\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <MyNavbar />\n        \n        <main>\n          {/* <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/sortingVisualizer\" component={SortingVisualizer} />\n            <Route path=\"/pathfindingVisualizer\" component={PathfindingVisualizer} />\n          </Switch> */}\n          <Switch>\n            <Route path={process.env.PUBLIC_URL + '/'} exact component={Home} />\n            <Route path={process.env.PUBLIC_URL + '/sortingVisualizer'} component={SortingVisualizer} />\n            <Route path={process.env.PUBLIC_URL + '/pathfindingVisualizer'} component={PathfindingVisualizer} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}